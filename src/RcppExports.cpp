// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_convert_time
int rcpp_convert_time(const std::string& hms);
RcppExport SEXP _gtfsrouter_rcpp_convert_time(SEXP hmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type hms(hmsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_convert_time(hms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_time_to_seconds
Rcpp::IntegerVector rcpp_time_to_seconds(std::vector <std::string> times);
RcppExport SEXP _gtfsrouter_rcpp_time_to_seconds(SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector <std::string> >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_time_to_seconds(times));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_timetable
Rcpp::DataFrame rcpp_make_timetable(Rcpp::DataFrame stop_times, std::vector <std::string> stop_ids, std::vector <std::string> trip_ids);
RcppExport SEXP _gtfsrouter_rcpp_make_timetable(SEXP stop_timesSEXP, SEXP stop_idsSEXP, SEXP trip_idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type stop_times(stop_timesSEXP);
    Rcpp::traits::input_parameter< std::vector <std::string> >::type stop_ids(stop_idsSEXP);
    Rcpp::traits::input_parameter< std::vector <std::string> >::type trip_ids(trip_idsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_timetable(stop_times, stop_ids, trip_ids));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_csa
Rcpp::DataFrame rcpp_csa(Rcpp::DataFrame timetable, Rcpp::DataFrame transfers, const size_t nstations, const size_t ntrips, const std::vector <size_t> start_stations, const std::vector <size_t> end_stations, const int start_time, const int max_transfers);
RcppExport SEXP _gtfsrouter_rcpp_csa(SEXP timetableSEXP, SEXP transfersSEXP, SEXP nstationsSEXP, SEXP ntripsSEXP, SEXP start_stationsSEXP, SEXP end_stationsSEXP, SEXP start_timeSEXP, SEXP max_transfersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type timetable(timetableSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type transfers(transfersSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nstations(nstationsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ntrips(ntripsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type start_stations(start_stationsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type end_stations(end_stationsSEXP);
    Rcpp::traits::input_parameter< const int >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< const int >::type max_transfers(max_transfersSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_csa(timetable, transfers, nstations, ntrips, start_stations, end_stations, start_time, max_transfers));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_freq_to_stop_times
Rcpp::DataFrame rcpp_freq_to_stop_times(Rcpp::DataFrame frequencies, Rcpp::DataFrame stop_times, const size_t nrows, const std::string sfx);
RcppExport SEXP _gtfsrouter_rcpp_freq_to_stop_times(SEXP frequenciesSEXP, SEXP stop_timesSEXP, SEXP nrowsSEXP, SEXP sfxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type frequencies(frequenciesSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type stop_times(stop_timesSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type sfx(sfxSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_freq_to_stop_times(frequencies, stop_times, nrows, sfx));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_transfer_nbs
Rcpp::List rcpp_transfer_nbs(Rcpp::DataFrame stops, const double dlim);
RcppExport SEXP _gtfsrouter_rcpp_transfer_nbs(SEXP stopsSEXP, SEXP dlimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type stops(stopsSEXP);
    Rcpp::traits::input_parameter< const double >::type dlim(dlimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_transfer_nbs(stops, dlim));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_traveltimes
Rcpp::IntegerMatrix rcpp_traveltimes(Rcpp::DataFrame timetable, Rcpp::DataFrame transfers, const size_t nstations, const std::vector <size_t> start_stations, const int start_time_min, const int start_time_max, const bool minimise_transfers, const int max_traveltime);
RcppExport SEXP _gtfsrouter_rcpp_traveltimes(SEXP timetableSEXP, SEXP transfersSEXP, SEXP nstationsSEXP, SEXP start_stationsSEXP, SEXP start_time_minSEXP, SEXP start_time_maxSEXP, SEXP minimise_transfersSEXP, SEXP max_traveltimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type timetable(timetableSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type transfers(transfersSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nstations(nstationsSEXP);
    Rcpp::traits::input_parameter< const std::vector <size_t> >::type start_stations(start_stationsSEXP);
    Rcpp::traits::input_parameter< const int >::type start_time_min(start_time_minSEXP);
    Rcpp::traits::input_parameter< const int >::type start_time_max(start_time_maxSEXP);
    Rcpp::traits::input_parameter< const bool >::type minimise_transfers(minimise_transfersSEXP);
    Rcpp::traits::input_parameter< const int >::type max_traveltime(max_traveltimeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_traveltimes(timetable, transfers, nstations, start_stations, start_time_min, start_time_max, minimise_transfers, max_traveltime));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gtfsrouter_rcpp_convert_time", (DL_FUNC) &_gtfsrouter_rcpp_convert_time, 1},
    {"_gtfsrouter_rcpp_time_to_seconds", (DL_FUNC) &_gtfsrouter_rcpp_time_to_seconds, 1},
    {"_gtfsrouter_rcpp_make_timetable", (DL_FUNC) &_gtfsrouter_rcpp_make_timetable, 3},
    {"_gtfsrouter_rcpp_csa", (DL_FUNC) &_gtfsrouter_rcpp_csa, 8},
    {"_gtfsrouter_rcpp_freq_to_stop_times", (DL_FUNC) &_gtfsrouter_rcpp_freq_to_stop_times, 4},
    {"_gtfsrouter_rcpp_transfer_nbs", (DL_FUNC) &_gtfsrouter_rcpp_transfer_nbs, 2},
    {"_gtfsrouter_rcpp_traveltimes", (DL_FUNC) &_gtfsrouter_rcpp_traveltimes, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_gtfsrouter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
